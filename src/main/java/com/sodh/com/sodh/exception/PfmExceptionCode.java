package com.sodh.com.sodh.exception;

import org.springframework.http.HttpStatus;

import java.util.HashSet;
import java.util.Set;

/**
 * Created by dhruti on 29/12/16.
 */
public enum PfmExceptionCode {
	/**
	 * generic exception
	 */
	GENERIC("GENERIC", HttpStatus.INTERNAL_SERVER_ERROR),
	FILE_IO_ERROR("FILE_IO_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

	PERSON_MISSING_USERNAME("PERSON_MISSING_USERNAME", HttpStatus.BAD_REQUEST),
	PERSON_MISSING_SSN("PERSON_MISSING_SSN", HttpStatus.BAD_REQUEST),

	INVALID_USERNAME_HELP_REQUEST("INVALID_USERNAME_HELP_REQUEST", HttpStatus.UNAUTHORIZED),
	INVALID_PASSWORD_HELP_REQUEST("INVALID_PASSWORD_HELP_REQUEST", HttpStatus.UNAUTHORIZED),
	INVALID_PASSWORD_FORMAT("INVALID_PASSWORD_FORMAT", HttpStatus.BAD_REQUEST),
	CANNOT_ACTIVATE_USER("CANNOT_ACTIVATE_USER", HttpStatus.BAD_REQUEST),
	CANNOT_CREATE_PROFILE("CANNOT_CREATE_PROFILE", HttpStatus.BAD_REQUEST),
	EMPTY_PASSWORD("EMPTY_PASSWORD", HttpStatus.BAD_REQUEST),

	MISSING_EMAIL("MISSING_EMAIL", HttpStatus.BAD_REQUEST),
	WRONG_EMAIL("WRONG_EMAIL", HttpStatus.BAD_REQUEST), //cannot find user by such email
	CREATE_PROFILE_FAIL("CREATE_PROFILE_FAIL", HttpStatus.INTERNAL_SERVER_ERROR),
	PROFILE_ALREADY_REGISTERED("PROFILE_ALREADY_REGISTERED", HttpStatus.BAD_REQUEST),
	USERNAME_ALREADY_UPDATED("USERNAME_ALREADY_UPDATED", HttpStatus.BAD_REQUEST),
	CREATE_PROFILE_QUESTION_FAIL("CREATE_PROFILE_QUESTION_FAIL", HttpStatus.INTERNAL_SERVER_ERROR),

	EXISTING_USERNAME("EXISTING_USERNAME", HttpStatus.BAD_REQUEST),
	MISSING_USERNAME("MISSING_USERNAME", HttpStatus.BAD_REQUEST),
	MISSING_SSN("MISSING_SSN", HttpStatus.BAD_REQUEST),
	MISSING_PASSWORD("MISSING_PASSWORD", HttpStatus.BAD_REQUEST),
	MISSING_SECURITY_QUESTION("MISSING_SECURITY_QUESTION", HttpStatus.BAD_REQUEST),
	WRONG_SECURITY_QUESTION_NUMBER("WRONG_SECURITY_QUESTION_NUMBER", HttpStatus.BAD_REQUEST),
	INVALID_EMAIL_FORMAT("INVALID_EMAIL_FORMAT", HttpStatus.BAD_REQUEST),

	MISSING_CREDENTIALS("MISSING_CREDENTIALS", HttpStatus.BAD_REQUEST),
	WRONG_CREDENTIALS("WRONG_CREDENTIALS", HttpStatus.UNAUTHORIZED),
	PROFILE_LOCKED("PROFILE_LOCKED", HttpStatus.FORBIDDEN),
	PROFILE_TMP_PSW_EXPIRED("PROFILE_LOCKED", HttpStatus.FORBIDDEN),
	IP_BLOCKED("IP_BLOCKED", HttpStatus.FORBIDDEN),
	PROFILE_BLOCKED("PROFILE_BLOCKED", HttpStatus.FORBIDDEN),
	WRONG_PROFILE_STATUS("WRONG_PROFILE_STATUS", HttpStatus.BAD_REQUEST),
	WRONG_PROFILE_STATE("WRONG_PROFILE_STATE", HttpStatus.BAD_REQUEST),
	PROFILE_STATE_INACTIVE("PROFILE_STATE_INACTIVE", HttpStatus.BAD_REQUEST),
	ENCODE_PASSWORD_ERROR("ENCODE_PASSWORD_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

	WRONG_TOKEN("WRONG_TOKEN", HttpStatus.BAD_REQUEST),
	WRONG_TOKEN_EMAIL_CHANGED("WRONG_TOKEN_EMAIL_CHANGED", HttpStatus.BAD_REQUEST),
	LINK_ALREADY_USED_EMAIL_CHANGED("LINK_ALREADY_USED_EMAIL_CHANGED", HttpStatus.BAD_REQUEST),
	TOKEN_EXPIRED("TOKEN_EXPIRED", HttpStatus.BAD_REQUEST),
	TOKEN_EXPIRED_EMAIL_CHANGED("TOKEN_EXPIRED_EMAIL_CHANGED", HttpStatus.BAD_REQUEST),
	JSON_PROCESSING_EXCEPTION("JSON_PROCESSING_EXCEPTION", HttpStatus.BAD_REQUEST),

	PROFILE_NOT_FOUND("PROFILE_NOT_FOUND", HttpStatus.BAD_REQUEST),
	PROFILE_ID_MISSING("PROFILE_ID_MISSING", HttpStatus.BAD_REQUEST),
	PROFILE_NOT_ACTIVE("PROFILE_NOT_ACTIVE", HttpStatus.BAD_REQUEST),

	FIRST_NAME_MISSING("FIRST_NAME_MISSING", HttpStatus.BAD_REQUEST),
	LAST_NAME_MISSING("LAST_NAME_MISSING", HttpStatus.BAD_REQUEST),
	FIRST_NAME_TOO_SHORT("FIRST_NAME_TOO_SHORT", HttpStatus.BAD_REQUEST),
	LAST_NAME_TOO_SHORT("LAST_NAME_TOO_SHORT", HttpStatus.BAD_REQUEST),

	DEFAULT_BD_MISSING("DEFAULT_BD_MISSING", HttpStatus.BAD_REQUEST),

	VERSION_NOT_FOUND("VERSION_NOT_FOUND", HttpStatus.BAD_REQUEST),
	TERMS_NOT_FOUND("TERMS_NOT_FOUND", HttpStatus.BAD_REQUEST),

	NO_BROKER_DEALERS("NO_BROKER_DEALERS", HttpStatus.BAD_REQUEST),
	WRONG_BROKER_DEALER("WRONG_BROKER_DEALER", HttpStatus.BAD_REQUEST),
	WRONG_DA("WRONG_DA", HttpStatus.BAD_REQUEST),

	READ_PROPERTY_ERROR("READ_PROPERTY_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	PROPERTY_MISSING("PROPERTY_MISSING", HttpStatus.INTERNAL_SERVER_ERROR),

	WRONG_AGREEMENT_TYPE("WRONG_AGREEMENT_TYPE", HttpStatus.BAD_REQUEST),
	AGREEMENT_WRONG_VERSION("AGREEMENT_WRONG_VERSION", HttpStatus.BAD_REQUEST),
	NO_AGREEMENT_INFO("NO_AGREEMENT_INFO", HttpStatus.BAD_REQUEST),
	AGREEMENT_WRONG_DATA("AGREEMENT_WRONG_DATA", HttpStatus.INTERNAL_SERVER_ERROR),
	AGREEMENT_WRONG_ID("AGREEMENT_WRONG_ID", HttpStatus.BAD_REQUEST),
	AGREEMENT_FINISHED("AGREEMENT_FINISHED", HttpStatus.BAD_REQUEST),
	AGREEMENT_WRONG_CAT("AGREEMENT_WRONG_CAT", HttpStatus.BAD_REQUEST),
	AGREEMENT_WRONG_ACTION("AGREEMENT_WRONG_ACTION", HttpStatus.BAD_REQUEST),
	NO_AGREEMENT_ACTION_CHANGE("NO_AGREEMENT_ACTION_CHANGE", HttpStatus.BAD_REQUEST),

	WRONG_EMAIL_SSN("WRONG_EMAIL_SSN", HttpStatus.BAD_REQUEST),
	CLIENT_ID_NOT_FOUND("CLIENT_ID_NOT_FOUND", HttpStatus.BAD_REQUEST),
	INVALID_SESSION("INVALID_SESSION", HttpStatus.BAD_REQUEST),
	ANSWER_MISSING("ANSWER_MISSING", HttpStatus.BAD_REQUEST),
	QUESTIONS_MISSING("QUESTIONS_MISSING", HttpStatus.BAD_REQUEST),
	USER_LOCKED("USER_LOCKED", HttpStatus.BAD_REQUEST),
	NOT_AUTHENTICATED("NOT_AUTHENTICATED", HttpStatus.BAD_REQUEST),
	USER_DELETED("USER_DELETED", HttpStatus.BAD_REQUEST),

	QUESTION_ID_MISSING("QUESTION_ID_MISSING", HttpStatus.BAD_REQUEST),
	SECURITY_REQUEST_CODE_MISSING("SECURITY_REQUEST_CODE_MISSING", HttpStatus.BAD_REQUEST),

	PROFILE_STATUS_NOT_FOUND("PROFILE_STATUS_NOT_FOUND", HttpStatus.BAD_REQUEST),
	FIRST_NAME_NOT_FOUND("FIRST_NAME_NOT_FOUND", HttpStatus.BAD_REQUEST),
	USERNAME_NOT_FOUND("USERNAME_NOT_FOUND", HttpStatus.BAD_REQUEST),
	ANSWER_NOT_FOUND("ANSWER_NOT_FOUND", HttpStatus.BAD_REQUEST),

	TO_FIELD_MISSING("TO_FIELD_MISSING", HttpStatus.BAD_REQUEST),

	INVALID_REFERRAL_LINK("INVALID_REFERRAL_LINK", HttpStatus.BAD_REQUEST),

	MISSING_BDAY("MISSING_BDAY", HttpStatus.BAD_REQUEST),
	MISSING_REASON("MISSING REASONID", HttpStatus.BAD_REQUEST),
	RECAPTCHA_SERVICE_EXCEPTION("RECAPTCHA_SERVICE_EXCEPTION", HttpStatus.BAD_REQUEST),
	/**
	 * exceptions for permission
	 */
	SERVICE_PERMISSION_DENIED("SERVICE_PERMISSION_DENIED", HttpStatus.BAD_REQUEST),
	SAML_ERROR("SAML_ERROR", HttpStatus.BAD_REQUEST),
	SAML_INTERNAL_ERROR("SAML_INTERNAL_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	/**
	 * Failed to get response from cetera Api
	 */
	CETERA_API_NOT_FOUND("CETERA_API_NOT_FOUND", HttpStatus.NOT_FOUND),
	CETERA_API_NO_CONTENT("CETERA_API_NO_CONTENT", HttpStatus.NO_CONTENT),
	CETERA_API_ERROR("CETERA_API_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	CETERA_SERVER_ERROR("CETERA_SERVER_ERROR", HttpStatus.SERVICE_UNAVAILABLE),
	EMAIL_ADDRESS_FORMAT_ERROR("EMAIL_ADDRESS_FORMAT_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	EMAIL_SEND_ERROR("EMAIL_SEND_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

	CIPHER_ERROR("CIPHER_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	HMAC_SHA256_HASH_ERROR("HMAC_SHA256_HASH_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

	CANNOT_UPDATE_USERNAME("CANNOT_UPDATE_USERNAME", HttpStatus.BAD_REQUEST),
	CANNOT_DELETE_USER("CANNOT_DELETE_USER", HttpStatus.BAD_REQUEST),
	CANNOT_DISABLE_USER("CANNOT_DISABLE_USER", HttpStatus.BAD_REQUEST),
	UNAUTHORIZED_ACCESS("UNAUTHORIZED_ACCESS", HttpStatus.UNAUTHORIZED),

	/**
	 * email template exception
	 */
	EMAIL_TEMPLATE_VARIABLE_VALIDATION_ERROR("EMAIL_TEMPLATE_VARIABLE_VALIDATION_ERROR",
			HttpStatus.INTERNAL_SERVER_ERROR),
	EMAIL_TEMPLATE_IO_ERROR("EMAIL_TEMPLATE_IO_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
	PASSWORD_CONSTRAIN_FAILED("PASSWORD_CONSTRAIN_FAILED", HttpStatus.BAD_REQUEST),
	NON_AUTHORITATIVE_INFORMATION("NON_AUTHORITATIVE_INFORMATION", HttpStatus.NON_AUTHORITATIVE_INFORMATION),
	CANNOT_UPDATE_USER_DETAILS("CANNOT_UPDATE_USER_DETAILS", HttpStatus.BAD_REQUEST),
	DUPLICATE_CLIENTID("PROFILE_WITH_SMAE_CLIENT_ID", HttpStatus.BAD_REQUEST);
	private static final Set<String> VALUE_SET = new HashSet<String>() {
		{
			for (PfmExceptionCode type : values()) {
				add(type.payload);
			}
		}
	};
	private String payload;
	private HttpStatus httpStatus;

	PfmExceptionCode(String payload, HttpStatus httpStatus) {
		this.payload = payload;
		this.httpStatus = httpStatus;
	}

	public static final Set<String> valuesSet() {
		return VALUE_SET;
	}

	public HttpStatus getHttpStatus() {
		return httpStatus;
	}

	public String valueOf() {
		return payload;
	}

}

